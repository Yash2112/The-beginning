{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import bs4\n",
    "import selenium\n",
    "import requests\n",
    "import re\n",
    "from selenium.common.exceptions import NoSuchElementException"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building Recoomendation System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "browser = webdriver.Chrome('chromedriver.exe')\n",
    "browser.get('https://www.zomato.com/bangalore/great-food-no-bull')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "132\n"
     ]
    }
   ],
   "source": [
    "restaurants =browser.find_elements_by_css_selector('div.col-s-8.col-l-1by3')\n",
    "print(len(restaurants))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rest_name</th>\n",
       "      <th>rest_link</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Brewklyn Microbrewery</td>\n",
       "      <td>https://www.zomato.com/bangalore/brewklyn-micr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Output Bengaluru</td>\n",
       "      <td>https://www.zomato.com/bangalore/output-bengal...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Punjab Bistro</td>\n",
       "      <td>https://www.zomato.com/bangalore/punjab-bistro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Old Fashioned Bar</td>\n",
       "      <td>https://www.zomato.com/bangalore/the-old-fashi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1131 Bar + Kitchen</td>\n",
       "      <td>https://www.zomato.com/bangalore/1131-bar-kitc...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               rest_name                                          rest_link\n",
       "0  Brewklyn Microbrewery  https://www.zomato.com/bangalore/brewklyn-micr...\n",
       "1       Output Bengaluru  https://www.zomato.com/bangalore/output-bengal...\n",
       "2          Punjab Bistro  https://www.zomato.com/bangalore/punjab-bistro...\n",
       "3  The Old Fashioned Bar  https://www.zomato.com/bangalore/the-old-fashi...\n",
       "4     1131 Bar + Kitchen  https://www.zomato.com/bangalore/1131-bar-kitc..."
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_info(review, selector , attribute):\n",
    "    try:    \n",
    "        tag = review.find_element_by_css_selector(selector)\n",
    "    \n",
    "        tag = tag.get_attribute(attribute)\n",
    "    except:\n",
    "        tag=None\n",
    "    return tag\n",
    "df_restaurants=pd.DataFrame(columns={'rest_name','rest_link'})\n",
    "for restaurant in restaurants:  \n",
    "    rest_name = get_info(restaurant,'div.res_title.zblack.bold.nowrap','innerHTML')\n",
    "    if rest_name != None:\n",
    "        rest_name = rest_name.strip()\n",
    "    rest_link = get_info(restaurant,'a.relative.top-res-box-bg.pl10.ptop0','href')\n",
    "    curr_restaurant={\n",
    "                 'rest_name':rest_name,\n",
    "                 'rest_link':rest_link\n",
    "             }\n",
    "    df_restaurants= df_restaurants.append(curr_restaurant,ignore_index=True)\n",
    "df_restaurants.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_reviews=pd.DataFrame(columns={'rating','user_name','user_id','rest_name'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rest_name</th>\n",
       "      <th>rating</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Brewklyn Microbrewery Bangalore</td>\n",
       "      <td>Rated 5.0</td>\n",
       "      <td>1826583</td>\n",
       "      <td>Reedhika Puliani</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brewklyn Microbrewery Bangalore</td>\n",
       "      <td>Rated 5.0</td>\n",
       "      <td>31021666</td>\n",
       "      <td>Nikhil Singla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brewklyn Microbrewery Bangalore</td>\n",
       "      <td>Rated 5.0</td>\n",
       "      <td>3048280</td>\n",
       "      <td>Alexandrina Namrata</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brewklyn Microbrewery Bangalore</td>\n",
       "      <td>Rated 4.0</td>\n",
       "      <td>36088032</td>\n",
       "      <td>Abhishek Sharma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brewklyn Microbrewery Bangalore</td>\n",
       "      <td>Rated 4.0</td>\n",
       "      <td>407847</td>\n",
       "      <td>Nitin Hajela (TheFoodieTales.com)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         rest_name     rating   user_id  \\\n",
       "0  Brewklyn Microbrewery Bangalore  Rated 5.0   1826583   \n",
       "1  Brewklyn Microbrewery Bangalore  Rated 5.0  31021666   \n",
       "2  Brewklyn Microbrewery Bangalore  Rated 5.0   3048280   \n",
       "3  Brewklyn Microbrewery Bangalore  Rated 4.0  36088032   \n",
       "4  Brewklyn Microbrewery Bangalore  Rated 4.0    407847   \n",
       "\n",
       "                           user_name  \n",
       "0                   Reedhika Puliani  \n",
       "1                      Nikhil Singla  \n",
       "2                Alexandrina Namrata  \n",
       "3                    Abhishek Sharma  \n",
       "4  Nitin Hajela (TheFoodieTales.com)  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for link in df_restaurants['rest_link']:\n",
    "    browser.get(link )\n",
    "    #review_sel ='a.item.respageMenu-item.restaurant-tab-item-jumbo-track.active'\n",
    "    #review_button = browser.find_element_by_css_selector(review_sel)\n",
    "    #review_button.click()\n",
    "    while True:\n",
    "        more_sel = 'div.load-more'\n",
    "        try:\n",
    "            load_more_button = browser.find_element_by_css_selector(more_sel)\n",
    "            load_more_button.click()\n",
    "\n",
    "            reviews = browser.find_elements_by_css_selector('div.ui.segment.clearfix.brtop')\n",
    "        except Exception:\n",
    "            break\n",
    "    def get_info(review, selector , attribute):\n",
    "        try:    \n",
    "            tag = review.find_element_by_css_selector(selector)\n",
    "\n",
    "            tag = tag.get_attribute(attribute)\n",
    "        except:\n",
    "            tag=None\n",
    "        return tag\n",
    "        \n",
    "    for review in reviews:  \n",
    "            rating=get_info(review,'div.ttupper','aria-label')\n",
    "            #y=re.findall('[0-9.]+',rating)\n",
    "            #rating = float(y[0])\n",
    "            name_selec = 'a[data-entity_id]'\n",
    "            user_id =get_info(review,name_selec,'data-entity_id')  \n",
    "            user_name = get_info(review,name_selec,'innerHTML') \n",
    "            if user_name !=None:\n",
    "                user_name = user_name.strip()\n",
    "            rest_name = get_info(browser,'a.ui.large.header','title') \n",
    "            curr_review={\n",
    "                         'user_name':user_name,\n",
    "                         'rating':rating,\n",
    "                         'user_id':user_id,\n",
    "                         'rest_name':rest_name\n",
    "                     }\n",
    "            df_reviews= df_reviews.append(curr_review,ignore_index=True)\n",
    "df_reviews.head()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7974"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_reviews.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_reviews.to_csv('zomato.csv',index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
